package dev.mvr.schedule;

import com.vk.api.sdk.client.TransportClient;
import com.vk.api.sdk.client.VkApiClient;
import com.vk.api.sdk.client.actors.GroupActor;
import com.vk.api.sdk.exceptions.ApiException;
import com.vk.api.sdk.exceptions.ClientException;
import com.vk.api.sdk.httpclient.HttpTransportClient;
import com.vk.api.sdk.objects.messages.Message;
import com.vk.api.sdk.queries.messages.MessagesGetLongPollHistoryQuery;
import jakarta.servlet.ServletContextEvent;
import jakarta.servlet.ServletContextListener;
import jakarta.servlet.annotation.WebListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Random;

@WebListener
public class VKLongPollBot implements ServletContextListener {

    private static final Logger log = LoggerFactory.getLogger(VKLongPollBot.class);
    private static VkApiClient vk;
    private static GroupActor actor;
    private static Integer ts;
    private static boolean isRunning = false;
    private static Thread botThread;

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        log.info("Starting VK LongPoll Bot...");

        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
            TransportClient transportClient = HttpTransportClient.getInstance();
            vk = new VkApiClient(transportClient);

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            String token = System.getenv("VK_BOT_TOKEN");
            String groupId = System.getenv("VK_GROUP_ID");

            if (token == null || groupId == null) {
                log.error("VK_BOT_TOKEN –∏–ª–∏ VK_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
                log.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render.com");
                return;
            }

            actor = new GroupActor(Integer.parseInt(groupId), token);
            log.info("VK Bot initialized for group: {}", groupId);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            isRunning = true;
            botThread = new Thread(this::runBot);
            botThread.setDaemon(true);
            botThread.start();

        } catch (Exception e) {
            log.error("Failed to initialize VK Bot", e);
        }
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        log.info("Stopping VK LongPoll Bot...");
        isRunning = false;
        if (botThread != null) {
            botThread.interrupt();
        }
    }

    private void runBot() {
        log.info("Bot thread started");

        while (isRunning) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
                MessagesGetLongPollHistoryQuery eventsQuery = vk.messages()
                        .getLongPollHistory(actor)
                        .ts(ts);

                if (ts != null) {
                    eventsQuery.ts(ts);
                }

                List<Message> messages = eventsQuery.execute().getMessages().getItems();

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for (Message message : messages) {
                    if (message != null) {
                        handleMessage(message);
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º ts –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                ts = vk.messages().getLongPollServer(actor).execute().getTs();

                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                Thread.sleep(1000);

            } catch (ApiException e) {
                log.error("VK API error: {}", e.getMessage());
                sleep(5000); // –ñ–¥–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
            } catch (ClientException e) {
                log.error("Client error: {}", e.getMessage());
                sleep(5000);
            } catch (InterruptedException e) {
                log.info("Bot thread interrupted");
                break;
            } catch (Exception e) {
                log.error("Unexpected error", e);
                sleep(10000);
            }
        }
    }

    private void handleMessage(Message message) {
        try {
            String text = message.getText();
            Integer userId = message.getFromId();
            Integer chatId = message.getPeerId();

            log.info("New message from {}: {}", userId, text);

            // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞
            String response;

            if (text == null || text.trim().isEmpty()) {
                response = "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ üéØ";
            } else if (text.toLowerCase().contains("–ø—Ä–∏–≤–µ—Ç")) {
                response = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üòä";
            } else if (text.toLowerCase().contains("–∫–∞–∫ –¥–µ–ª–∞")) {
                response = "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞ üí™";
            } else if (text.toLowerCase().contains("–ø–æ–≥–æ–¥–∞")) {
                response = "–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–≥–æ–¥—É üå§Ô∏è";
            } else {
                response = "–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \"" + text + "\"\n" +
                        "–ü–æ–∫–∞ —è —Ç–æ–ª—å–∫–æ —É—á—É—Å—å –æ—Ç–≤–µ—á–∞—Ç—å!";
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            vk.messages().send(actor)
                    .peerId(chatId)
                    .message(response)
                    .execute();

            log.info("Sent response to {}: {}", userId, response);

        } catch (Exception e) {
            log.error("Error handling message", e);
        }
    }

    private void sleep(long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}