package dev.mvr.schedule;

import com.vk.api.sdk.client.TransportClient;
import com.vk.api.sdk.client.VkApiClient;
import com.vk.api.sdk.client.actors.GroupActor;
import com.vk.api.sdk.exceptions.ApiException;
import com.vk.api.sdk.exceptions.ClientException;
import com.vk.api.sdk.httpclient.HttpTransportClient;
import com.vk.api.sdk.objects.messages.*;
import com.vk.api.sdk.queries.messages.MessagesGetLongPollHistoryQuery;
import jakarta.servlet.ServletContextEvent;
import jakarta.servlet.ServletContextListener;
import jakarta.servlet.annotation.WebListener;

import java.util.*;

@WebListener
public class Bot implements ServletContextListener {

    private Thread botThread;
    private boolean isRunning = false;
    private static final Map<Integer, String> userUniversity = new HashMap<>();
    private static final Map<Integer, String> userGroup = new HashMap<>();

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        System.out.println("üöÄ Starting VK Bot...");
        isRunning = true;

        // –ó–ê–ü–£–°–ö–ê–ï–ú –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        botThread = new Thread(() -> {
            try {
                runBot();
            } catch (Exception e) {
                System.out.println("‚ùå Bot crashed: " + e.getMessage());
            }
        });

        botThread.start();
        System.out.println("‚úÖ Bot thread started");
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        System.out.println("üõë Stopping VK Bot...");
        isRunning = false;
        if (botThread != null) {
            botThread.interrupt();
        }
    }

    public void runBot() throws ClientException, ApiException, InterruptedException {

        TransportClient transportClient = new HttpTransportClient();
        VkApiClient vk = new VkApiClient(transportClient);

        String token = System.getenv("VK_BOT_TOKEN");
        Integer groupId = Integer.parseInt(System.getenv("VK_GROUP_ID"));

        if (token == null) {
            return;
        }

        GroupActor actor = new GroupActor(groupId, token);
        // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK API
        try {
            String groupName = vk.groups().getByIdObjectLegacy(actor).execute().get(0).getName();
        } catch (Exception e) {
            return;
        }

        Integer ts = vk.messages().getLongPollServer(actor).execute().getTs();
        Random random = new Random();
        while (isRunning) {
            try {
                MessagesGetLongPollHistoryQuery historyQuery =
                        vk.messages().getLongPollHistory(actor).ts(ts);

                List<Message> messages = historyQuery.execute().getMessages().getItems();

                if (!messages.isEmpty()) {
                    for (Message message : messages) {
                        if (message.getText() != null) {
                            if (message.getText().equals("–ù–∞—á–∞—Ç—å")) {
                                Keyboard keyboard = new Keyboard().setOneTime(true);
                                List<List<KeyboardButton>> allKeys = new ArrayList<>();
                                List<KeyboardButton> line1 = new ArrayList<>();
                                line1.add(new KeyboardButton().setAction(
                                        new KeyboardButtonAction().setLabel("–û–º–ì–£")
                                                .setType(TemplateActionTypeNames.TEXT)
                                ));
                                line1.add(new KeyboardButton().setAction(
                                        new KeyboardButtonAction().setLabel("–û–º–ì–¢–£")
                                                .setType(TemplateActionTypeNames.TEXT)
                                ));
                                allKeys.add(line1);
                                keyboard.setButtons(allKeys);
                                vk.messages()
                                        .send(actor)
                                        .message("–ü—Ä–∏–≤–µ—Ç –≤—ã–±–µ—Ä–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç")
                                        .userId(message.getFromId())
                                        .randomId(random.nextInt(10000))
                                        .keyboard(keyboard)
                                        .execute();
                            } else if (message.getText().equals("–û–º–ì–£")) {
                                userUniversity.put(message.getFromId(),"–û–º–ì–£");}
                            else if( message.getText().equals("–û–º–ì–¢–£")){
                                userUniversity.put(message.getFromId(),"–û–º–ì–¢–£");
                            } else if (message.getText().equals("–º–æ–π —É–Ω–∏–≤–µ—Ä")) {
                                vk.messages()
                                        .send(actor)
                                        .message(userUniversity.getOrDefault(message.getFromId(),"–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"))
                                        .userId(message.getFromId())
                                        .randomId(random.nextInt(10000))
                                        .execute();

                            } else {
                                vk.messages()
                                        .send(actor)
                                        .message("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª")
                                        .userId(message.getFromId())
                                        .randomId(random.nextInt(10000))
                                        .execute();
                            }
                        }
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º TS
                ts = vk.messages().getLongPollServer(actor).execute().getTs();

                // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                Thread.sleep(1000);

            } catch (Exception e) {
                Thread.sleep(10000); // –ñ–¥–µ–º 10 —Å–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        }
    }
}