package dev.mvr.schedule;

import com.vk.api.sdk.client.TransportClient;
import com.vk.api.sdk.client.VkApiClient;
import com.vk.api.sdk.client.actors.GroupActor;
import com.vk.api.sdk.exceptions.ApiException;
import com.vk.api.sdk.exceptions.ClientException;
import com.vk.api.sdk.httpclient.HttpTransportClient;
import com.vk.api.sdk.objects.messages.Message;
import com.vk.api.sdk.queries.messages.MessagesGetLongPollHistoryQuery;
import jakarta.servlet.ServletContextEvent;
import jakarta.servlet.ServletContextListener;
import jakarta.servlet.annotation.WebListener;

import java.util.List;
import java.util.Random;

@WebListener
public class Bot implements ServletContextListener {

    private Thread botThread;
    private boolean isRunning = false;

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        System.out.println("üöÄ Starting VK Bot...");
        isRunning = true;

        // –ó–ê–ü–£–°–ö–ê–ï–ú –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        botThread = new Thread(() -> {
            try {
                runBot();
            } catch (Exception e) {
                System.out.println("‚ùå Bot crashed: " + e.getMessage());
            }
        });

        botThread.start();
        System.out.println("‚úÖ Bot thread started");
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        System.out.println("üõë Stopping VK Bot...");
        isRunning = false;
        if (botThread != null) {
            botThread.interrupt();
        }
    }

    public void runBot() throws ClientException, ApiException, InterruptedException {
        System.out.println("ü§ñ runBot() method called");

        TransportClient transportClient = new HttpTransportClient();
        VkApiClient vk = new VkApiClient(transportClient);

        String token = System.getenv("VK_BOT_TOKEN");
        Integer groupId = Integer.parseInt(System.getenv("VK_GROUP_ID"));

        System.out.println("üîë Token: " + (token != null ? "set" : "null"));
        System.out.println("üè¢ Group ID: " + groupId);

        if (token == null) {
            System.out.println("‚ùå VK_BOT_TOKEN is not set!");
            return;
        }

        GroupActor actor = new GroupActor(groupId, token);
        System.out.println("‚úÖ Bot initialized for group: " + groupId);

        // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK API
        try {
            String groupName = vk.groups().getByIdObjectLegacy(actor).execute().get(0).getName();
            System.out.println("‚úÖ Connected to group: " + groupName);
        } catch (Exception e) {
            System.out.println("‚ùå Failed to connect to VK: " + e.getMessage());
            return;
        }

        Integer ts = vk.messages().getLongPollServer(actor).execute().getTs();
        Random random = new Random();

        System.out.println("üîç Starting message checking loop...");

        while (isRunning) {
            try {
                System.out.println("üì° Checking for new messages...");

                MessagesGetLongPollHistoryQuery historyQuery =
                        vk.messages().getLongPollHistory(actor).ts(ts);

                List<Message> messages = historyQuery.execute().getMessages().getItems();

                if (!messages.isEmpty()) {
                    System.out.println("üí¨ Found " + messages.size() + " messages");

                    for (Message message : messages) {
                        if (message.getText() != null) {
                            System.out.println("üì® Message from " + message.getFromId() + ": " + message.getText());

                            if (message.getText().equals("–ü—Ä–∏–≤–µ—Ç")) {
                                vk.messages()
                                        .send(actor)
                                        .message("–ü—Ä–∏–≤–µ—Ç –æ—Ç –±–æ—Ç–∞! üéâ")
                                        .userId(message.getFromId())
                                        .randomId(random.nextInt(10000))
                                        .execute();
                                System.out.println("‚úÖ Sent: –ü—Ä–∏–≤–µ—Ç –æ—Ç –±–æ—Ç–∞!");
                            } else {
                                vk.messages()
                                        .send(actor)
                                        .message("–í—ã —Å–∫–∞–∑–∞–ª–∏: " + message.getText())
                                        .userId(message.getFromId())
                                        .randomId(random.nextInt(10000))
                                        .execute();
                                System.out.println("‚úÖ Echo: " + message.getText());
                            }
                        }
                    }
                } else {
                    System.out.println("üì≠ No new messages");
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º TS
                ts = vk.messages().getLongPollServer(actor).execute().getTs();

                // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                Thread.sleep(3000);

            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Error in loop: " + e.getMessage());
                Thread.sleep(10000); // –ñ–¥–µ–º 10 —Å–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        }
    }
}