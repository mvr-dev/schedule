package dev.mvr.schedule;

import com.vk.api.sdk.client.VkApiClient;
import com.vk.api.sdk.client.actors.GroupActor;
import com.vk.api.sdk.httpclient.HttpTransportClient;
import com.vk.api.sdk.objects.messages.Message;
import jakarta.servlet.ServletContextEvent;
import jakarta.servlet.ServletContextListener;
import jakarta.servlet.annotation.WebListener;

    @WebListener
    public class SimpleVKBot implements ServletContextListener {

        private Thread botThread;
        private boolean isRunning = false;

        @Override
        public void contextInitialized(ServletContextEvent event) {
            System.out.println("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º VK –±–æ—Ç–∞...");
            isRunning = true;
            botThread = new Thread(this::runBot);
            botThread.start();
        }

        @Override
        public void contextDestroyed(ServletContextEvent event) {
            System.out.println("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...");
            isRunning = false;
            if (botThread != null) botThread.interrupt();
        }

        private void runBot() {
            try {
                // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ VK
                VkApiClient vk = new VkApiClient(HttpTransportClient.getInstance());

                // 2. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –í–ö
                String token = System.getenv("VK_BOT_TOKEN");
                Integer groupId = Integer.parseInt(System.getenv("VK_GROUP_ID"));

                GroupActor actor = new GroupActor(groupId, token);
                System.out.println("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã ID: " + groupId);

                // 3. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
                while (isRunning) {
                    try {
                        // 4. –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π TS
                        var server = vk.messages().getLongPollServer(actor).execute();
                        int ts = server.getTs();

                        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        var response = vk.messages()
                                .getLongPollHistory(actor)
                                .ts(ts)
                                .execute();

                        // 6. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                        if (response.getMessages() != null) {
                            for (var message : response.getMessages().getItems()) {
                                if (message != null && message.getText() != null) {
                                    handleMessage(vk, actor, message);
                                }
                            }
                        }

                        // 7. –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                        Thread.sleep(3000);

                    } catch (Exception e) {
                        System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞: " + e.getMessage());
                        Thread.sleep(10000); // –ñ–¥–µ–º 10 —Å–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    }
                }

            } catch (Exception e) {
                System.out.println("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: " + e.getMessage());
            }
        }

        private void handleMessage(VkApiClient vk, GroupActor actor, Message message) {
            try {
                String text = message.getText().toLowerCase();
                String response;
                System.out.println(text);
                // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
                if (text.contains("–ø—Ä–∏–≤–µ—Ç")) {
                    response = "–ü—Ä–∏–≤–µ—Ç! üòä";
                } else if (text.contains("–∫–∞–∫ –¥–µ–ª–∞")) {
                    response = "–û—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?";
                } else {
                    response = "–Ø –ø–æ–ª—É—á–∏–ª: " + message.getText();
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                vk.messages().send(actor)
                        .peerId(message.getPeerId())
                        .message(response)
                        .execute();

                System.out.println("üí¨ –û—Ç–≤–µ—Ç–∏–ª: " + response);

            } catch (Exception e) {
                System.out.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + e.getMessage());
            }
        }
    }
