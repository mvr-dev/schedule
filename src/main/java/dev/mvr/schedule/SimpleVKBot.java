package dev.mvr.schedule;

import com.vk.api.sdk.client.VkApiClient;
import com.vk.api.sdk.client.actors.GroupActor;
import com.vk.api.sdk.httpclient.HttpTransportClient;
import jakarta.servlet.ServletContextEvent;
import jakarta.servlet.ServletContextListener;
import jakarta.servlet.annotation.WebListener;

@WebListener
public class SimpleVKBot implements ServletContextListener {

    private Thread botThread;
    private boolean isRunning = false;

    @Override
    public void contextInitialized(ServletContextEvent event) {
        System.out.println("üöÄ Starting VK Bot...");

        isRunning = true;
        botThread = new Thread(this::runBot);
        botThread.start();
    }

    @Override
    public void contextDestroyed(ServletContextEvent event) {
        System.out.println("üõë Stopping VK Bot...");
        isRunning = false;
        if (botThread != null) {
            botThread.interrupt();
        }
    }

    private void runBot() {
        try {
            // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
            VkApiClient vk = new VkApiClient(HttpTransportClient.getInstance());

            // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            String token = System.getenv("VK_BOT_TOKEN");
            String groupId = System.getenv("VK_GROUP_ID");

            if (token == null || groupId == null) {
                System.out.println("‚ùå Set VK_TOKEN and VK_GROUP_ID environment variables!");
                return;
            }

            GroupActor actor = new GroupActor(Integer.parseInt(groupId), token);
            System.out.println("‚úÖ Bot initialized for group: " + groupId);

            // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LongPoll
            Integer ts = vk.messages().getLongPollServer(actor).execute().getTs();
            System.out.println("üì° LongPoll started. TS: " + ts);

            // 4. –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ë–û–¢–ê - –í–°–¢–ê–í–õ–Ø–ï–ú –°–Æ–î–ê
            while (isRunning) {
                try {
                    System.out.println("üîç Checking for messages...");

                    // 5. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    var response = vk.messages()
                            .getLongPollHistory(actor)
                            .ts(ts)
                            .execute();

                    // 6. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    if (response.getMessages() != null &&
                            response.getMessages().getItems() != null) {

                        for (var message : response.getMessages().getItems()) {
                            if (message != null &&
                                    message.getText() != null &&
                                    !message.getText().trim().isEmpty() &&
                                    message.getFromId() > 0) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥—Ä—É–ø–ø

                                System.out.println("üí¨ New message from " + message.getFromId() + ": " + message.getText());

                                // 7. –ü–†–û–°–¢–ï–ô–®–ò–ô –û–¢–í–ï–¢
                                String responseText;
                                String userText = message.getText().toLowerCase();

                                if (userText.contains("–ø—Ä–∏–≤–µ—Ç")) {
                                    responseText = "–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ –¥–µ–ª–∞?";
                                } else if (userText.contains("–∫–∞–∫ –¥–µ–ª–∞")) {
                                    responseText = "–£ –º–µ–Ω—è –æ—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é –±–µ–∑ –ø–µ—Ä–µ–±–æ–µ–≤! üí™";
                                } else if (userText.contains("–∫–æ–º–∞–Ω–¥—ã")) {
                                    responseText = "–Ø –ø–æ–Ω–∏–º–∞—é: –ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞, –∫–æ–º–∞–Ω–¥—ã";
                                } else {
                                    responseText = "–í—ã —Å–∫–∞–∑–∞–ª–∏: \"" + message.getText() + "\". –Ø –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —É—á—É—Å—å!";
                                }

                                // 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                                vk.messages().send(actor)
                                        .peerId(message.getPeerId())
                                        .message(responseText)
                                        .execute();

                                System.out.println("‚úÖ Sent response: " + responseText);
                            }
                        }
                    }

                    // 9. –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    ts = response.getNewPts();

                    // 10. –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                    Thread.sleep(3000);

                } catch (Exception e) {
                    System.out.println("‚ö†Ô∏è Error in bot loop: " + e.getMessage());
                    e.printStackTrace();

                    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LongPoll
                    try {
                        ts = vk.messages().getLongPollServer(actor).execute().getTs();
                        System.out.println("üîÑ Reinitialized LongPoll. New TS: " + ts);
                    } catch (Exception ex) {
                        System.out.println("‚ùå Failed to reinitialize LongPoll: " + ex.getMessage());
                    }

                    Thread.sleep(10000); // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                }
            }

        } catch (Exception e) {
            System.out.println("‚ùå Failed to start bot: " + e.getMessage());
            e.printStackTrace();
        }
    }
}